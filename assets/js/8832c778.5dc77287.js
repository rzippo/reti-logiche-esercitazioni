"use strict";(self.webpackChunkreti_logiche_esercitazioni=self.webpackChunkreti_logiche_esercitazioni||[]).push([[4431],{87661:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>m});const a=JSON.parse('{"id":"esercitazioni/Assembler/Ambiente","title":"Ambiente","description":"","source":"@site/versioned_docs/version-2025-26/esercitazioni/Assembler/2. Ambiente.mdx","sourceDirName":"esercitazioni/Assembler","slug":"/esercitazioni/Assembler/Ambiente","permalink":"/reti-logiche-esercitazioni/esercitazioni/Assembler/Ambiente","draft":false,"unlisted":false,"tags":[],"version":"2025-26","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"description":""},"sidebar":"esercitazioniSidebar","previous":{"title":"Introduzione","permalink":"/reti-logiche-esercitazioni/esercitazioni/Assembler/Introduzione"},"next":{"title":"Esercitazioni","permalink":"/reti-logiche-esercitazioni/category/esercitazioni"}}');var r=n(74848),s=n(28453),t=n(86025);const o={sidebar_position:2,description:""},l="Ambiente di sviluppo",c={},m=[{value:"Struttura dell&#39;ambiente",id:"struttura-dellambiente",level:2},{value:"Lanciare l&#39;ambiente e primo programma",id:"lanciare-lambiente-e-primo-programma",level:2}];function d(e){const i={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"ambiente-di-sviluppo",children:"Ambiente di sviluppo"})}),"\n",(0,r.jsxs)(i.p,{children:["In questo corso, programmeremo assembler per architettura x86, a 32 bit.\r\nUseremo la sintassi ",(0,r.jsx)(i.em,{children:"GAS"})," (anche nota come ",(0,r.jsx)(i.em,{children:"AT&T"}),"), usando la linea di comando in un sistema Linux.\r\nUtilizzeremo degli script appositi per assemblare, testare e debuggare.\r\nQuesti script non fanno che chiamare, semplificandone l'uso, ",(0,r.jsx)(i.code,{children:"gcc"})," e ",(0,r.jsx)(i.code,{children:"gdb"}),"."]}),"\n",(0,r.jsxs)(i.p,{children:["Per istruzioni per installare e configurare il proprio ambiente, vedere ",(0,r.jsx)(i.a,{href:"/reti-logiche-esercitazioni/esercitazioni/Ambienti",children:"qui"}),".\r\nQui vedremo pi\xf9 da vicino il sistema utilizzato all'esame, basato su Windows 11 + WSL."]}),"\n",(0,r.jsx)(i.admonition,{title:"Informazione a rischio aggiornamento",type:"warning",children:(0,r.jsxs)(i.p,{children:["Fino all'A.A. 2024/25, ",(0,r.jsx)(i.em,{children:"nei laboratori"})," si \xe8 utilizzato Windows + WSL come spiegato qui.\r\nCi\xf2 \xe8 ancora ",(0,r.jsx)("u",{children:"da confermare"})," per l'A.A. 2025/26.\r\nOgni eventuale cambiamento sar\xe0 a impatto pratico minimo."]})}),"\n",(0,r.jsx)(i.h2,{id:"struttura-dellambiente",children:"Struttura dell'ambiente"}),"\n",(0,r.jsx)(i.p,{children:"I programmi che scriveremo ed eseguiremo, cos\xec come quelli utilizzati per assemblare, gireranno in un terminale Linux."}),"\n",(0,r.jsxs)(i.p,{children:["Nell'ambiente d'esame, si usa un Ubuntu 24.04 virtualizzato tramite ",(0,r.jsx)(i.a,{href:"https://learn.microsoft.com/en-us/windows/wsl/install",children:"WSL"})," su macchina Windows 11.\r\nCome editor usiamo ",(0,r.jsx)(i.a,{href:"https://code.visualstudio.com/",children:"Visual Studio Code"})," con l'",(0,r.jsx)(i.a,{href:"https://code.visualstudio.com/docs/remote/wsl",children:"estensione per lo sviluppo in WSL"}),"."]}),"\n",(0,r.jsxs)("figure",{children:[(0,r.jsx)("img",{src:(0,t.Ay)("2025-26/img/assembler/ambiente/ambiente-wsl.drawio.png"),style:{maxWidth:"min(100%, 24rem)"},alt:"\r\nLo schema mostra un host Windows 11 (x86), che esegue sia l'editor VS Code che l'ambiente virtuale WSL2 (x86).\r\nAll'interno di WSL2, il sistema operativo eseguito \xe8 Ubuntu 24.04.\r\nL'editor VS Code \xe8 collegato direttamente al sistema virtualizzato: il terminale mostrato nell'editor \xe8 di Ubuntu, e non di Windows.\r\n",title:"\r\nL'host Windows 11 esegue sia l'editor VS Code che l'ambiente virtuale WSL2 (x86).\r\nL'editor VS Code \xe8 collegato direttamente al sistema virtualizzato: il terminale mostrato nell'editor \xe8 di Ubuntu, e non di Windows.\r\n"}),(0,r.jsx)("figcaption",{children:(0,r.jsx)(i.p,{children:"Schema dell'ambiente usato all'esame."})})]}),"\n",(0,r.jsx)(i.p,{children:"Questo ci permette di mantenere un ambiente grafico moderno mentre si lavora con un terminale Linux virtualizzato."}),"\n",(0,r.jsx)(i.h2,{id:"lanciare-lambiente-e-primo-programma",children:"Lanciare l'ambiente e primo programma"}),"\n",(0,r.jsxs)(i.p,{children:["Una volta eseguiti i passi dell'installazione, avremo una cartella ",(0,r.jsx)(i.code,{children:"C:/reti_logiche"})," con contenuto come da figura."]}),"\n",(0,r.jsx)("img",{src:(0,t.Ay)("2025-26/img/assembler/ambiente/c-reti_logiche.png"),style:{maxWidth:"min(100%, 18rem)"},alt:"Cartelle: assembler, verilog, dispense. Files: assembler-workspace.code-workspace, verilog-workspace.code-workspace, Istruzioni.txt"}),"\n",(0,r.jsxs)(i.p,{children:["Il file ",(0,r.jsx)(i.code,{children:"assembler-workspace.code-workspace"})," lancer\xe0 VS Code, collegandosi alla macchina virtuale WSL e la cartella di lavoro ",(0,r.jsx)(i.code,{children:"C:/reti_logiche/assembler"}),"."]}),"\n",(0,r.jsx)(i.admonition,{type:"info",children:(0,r.jsx)(i.p,{children:"Questo file \xe8 configurato per l'ambiente Windows + WSL, per automatizzare l'avvio.\r\nSe si usa un ambiente diverso, il file andr\xe0 modificato di conseguenza."})}),"\n",(0,r.jsx)(i.p,{children:"La finestra VS Code che si aprir\xe0 sar\xe0 simile alla seguente."}),"\n",(0,r.jsx)("img",{src:(0,t.Ay)("2025-26/img/assembler/ambiente/vs-code-assembler-start.png"),style:{maxWidth:"min(100%, 48rem)"},alt:"Una finestra di VS Code, che riporta 'assembler-workspace (Area di lavoro)' nella barra del titolo, il contenuto della cartella assembler nel pannello a sinistra, e 'WSL: reti-logiche-assembler' in basso a sinistra."}),"\n",(0,r.jsxs)(i.p,{children:["Nell'angolo in basso a sinistra, ",(0,r.jsx)(i.code,{children:"WSL: reti-logiche-assembler"})," sta a indicare che l'editor \xe8 correttamente connesso alla macchina virtuale (compare una dicitura simile se si usa SSH)."]}),"\n",(0,r.jsx)(i.p,{children:"I file e cartelle mostrati nell'immagine sono quelli che ci si deve aspettare dall'ambiente vuoto."}),"\n",(0,r.jsxs)(i.p,{children:["Il file ",(0,r.jsx)(i.code,{children:"test-ambiente.s"})," \xe8 un semplice programma per verificare che l'ambiente funzioni."]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-assembler",metastring:"showLines",children:'.include "./files/utility.s"\r\n\r\n.data\r\nmessaggio: .ascii "Ok.\\r"\r\n\r\n.text\r\n_main:  \r\n   nop\r\n   lea messaggio, %ebx\r\n   call outline\r\n   ret\r\n\n'})}),"\n",(0,r.jsx)(i.p,{children:"Apriamo quindi un terminale in VS Code (Terminale > Nuovo Terminale).\r\nPer poter lanciare gli script, il terminale deve essere Powershell, non bash."}),"\n",(0,r.jsx)(i.p,{children:"Non cos\xec:"}),"\n",(0,r.jsx)("img",{src:(0,t.Ay)("2025-26/img/assembler/ambiente/vs-code-assembler-terminal-bash.png"),style:{maxWidth:"min(100%, 44rem)"},alt:"Il pannello del terminale di VS Code, con la dicitura 'bash - assembler' in alto a destra."}),"\n",(0,r.jsx)(i.p,{children:"Ma cos\xec:"}),"\n",(0,r.jsx)("img",{src:(0,t.Ay)("2025-26/img/assembler/ambiente/vs-code-assembler-terminal-pwsh.png"),style:{maxWidth:"min(100%, 44rem)"},alt:"Il pannello del terminale di VS Code, con la dicitura 'pwsh - assembler' in alto a destra."}),"\n",(0,r.jsxs)(i.p,{children:["Per cambiare shell si pu\xf2 usare il bottone ",(0,r.jsx)(i.code,{children:"+"})," sulla destra, o lanciare il comando ",(0,r.jsx)(i.code,{children:"pwsh"})," senza argomenti."]}),"\n",(0,r.jsx)(i.admonition,{type:"info",children:(0,r.jsx)(i.p,{children:"Se si preferisce, in VS Code si pu\xf2 aprire un terminale anche come tab dell'editor, o spostandolo al lato anzich\xe9 in basso."})}),"\n",(0,r.jsx)(i.p,{children:"A questo punto possiamo lanciare il comando per assemblare il programma di test."}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{children:"./assemble.ps1 ./test-ambiente.s\n"})}),"\n",(0,r.jsxs)(i.p,{children:["Dovremmo adesso vedere, tra i file, il binario ",(0,r.jsx)(i.code,{children:"test-ambiente"}),".\r\nLo possiamo eseguire con ",(0,r.jsx)(i.code,{children:"./test-ambiente"}),", che dovrebbe stampare ",(0,r.jsx)(i.code,{children:"Ok."}),"."]}),"\n",(0,r.jsx)("img",{src:(0,t.Ay)("2025-26/img/assembler/ambiente/vs-code-assembler-terminal-test-ambiente.png"),style:{maxWidth:"min(100%, 36rem)"},alt:"\r\nSequenza di comandi: './assembler.ps1 ./test-ambiente.s' assembla il programma di test, './test-ambiente' lo esegue.\r\nIl programma stampa 'Ok.' e termina.\r\n"})]})}function p(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>t,x:()=>o});var a=n(96540);const r={},s=a.createContext(r);function t(e){const i=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),a.createElement(s.Provider,{value:i},e.children)}}}]);