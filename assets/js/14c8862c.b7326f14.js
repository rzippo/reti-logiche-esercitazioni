"use strict";(self.webpackChunkreti_logiche_esercitazioni=self.webpackChunkreti_logiche_esercitazioni||[]).push([[6366],{90773:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"esercitazioni/Ambienti","title":"Ambienti di sviluppo","description":"[comment]:  (Content start)","source":"@site/versioned_docs/version-2025-26/esercitazioni/11. Ambienti.mdx","sourceDirName":"esercitazioni","slug":"/esercitazioni/Ambienti","permalink":"/reti-logiche-esercitazioni/esercitazioni/Ambienti","draft":false,"unlisted":false,"tags":[],"version":"2025-26","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Ambienti di sviluppo"},"sidebar":"esercitazioniSidebar","previous":{"title":"Introduzione","permalink":"/reti-logiche-esercitazioni/esercitazioni/Introduzione"},"next":{"title":"Assembler","permalink":"/reti-logiche-esercitazioni/category/assembler"}}');var a=n(74848),s=n(28453),t=n(86025);const o={sidebar_position:3,title:"Ambienti di sviluppo"},l="Ambienti di sviluppo",c={},d=[{value:"Editor",id:"editor",level:2},{value:"Ambiente assembler",id:"ambiente-assembler",level:2},{value:"Ambiente Verilog",id:"ambiente-verilog",level:2},{value:"Versioni dell&#39;ambiente e alternative",id:"versioni-dellambiente-e-alternative",level:2},{value:"Ambiente per Windows 11 + WSL2",id:"ambiente-per-windows-11--wsl2",level:2},{value:"Ambiente per Linux nativo <em>o</em> devcontainer",id:"ambiente-per-linux-nativo-o-devcontainer",level:2},{value:"Utilizzo nativo",id:"utilizzo-nativo",level:3},{value:"Utilizzo tramite devcontainer",id:"utilizzo-tramite-devcontainer",level:3},{value:"Alternative fai da te",id:"alternative-fai-da-te",level:2},{value:"Testare gli ambienti",id:"testare-gli-ambienti",level:2},{value:"Assembler",id:"assembler",level:3},{value:"Verilog",id:"verilog",level:3}];function m(e){const i={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.header,{children:(0,a.jsx)(i.h1,{id:"ambienti-di-sviluppo",children:"Ambienti di sviluppo"})}),"\n",(0,a.jsx)(i.p,{children:"In questo corso, scriveremo codice per programmi assembler e per descrivere reti logiche in Verilog.\nPer entrambi, utilizziamo un ambiente software che \xe8 lo stesso (o estremamente simile) a quello che si trover\xe0 all'esame."}),"\n",(0,a.jsx)(i.h2,{id:"editor",children:"Editor"}),"\n",(0,a.jsxs)(i.p,{children:["Nelle esercitazioni e nella documentazione faremo riferimento a ",(0,a.jsx)(i.a,{href:"https://code.visualstudio.com/",children:"VS Code"}),", che \xe8 l'unico editor che si potr\xe0 utilizzare all'esame."]}),"\n",(0,a.jsxs)(i.p,{children:["Non c'\xe8 per\xf2 nessun obbligo a usare VS Code per le esercitazioni personali, qualunque editor di file di testo andr\xe0 bene.\nAnche un editor da terminale come ",(0,a.jsx)(i.code,{children:"nano"})," o ",(0,a.jsx)(i.code,{children:"vim"}),"."]}),"\n",(0,a.jsx)(i.h2,{id:"ambiente-assembler",children:"Ambiente assembler"}),"\n",(0,a.jsx)(i.p,{children:"Programmare in assembler vuol dire programmare per una specifica architettura di processori.\nL'architettura x86 \xe8 stata rimpiazzata nel tempo da x64, a 64 bit, che \xe8 del tutto retrocompatibile.\nAltre architetture (in particolare, ARM) hanno istruzioni, registri e funzionamento completamente diversi e non sono compatibili con x86.\nUsare una macchina con architettura diversa \xe8 inevitabilmente fonte di problemi."}),"\n",(0,a.jsxs)(i.p,{children:["L'ambiente fornito funziona con Linux ",(0,a.jsx)(i.code,{children:"x86"})," (o ",(0,a.jsx)(i.code,{children:"x64"})," o ",(0,a.jsx)(i.code,{children:"amd64"}),", che significano la stessa cosa).\nNon funziona invece per processori ",(0,a.jsx)(i.code,{children:"arm64"}),", come quelli usati da Mac o Windows on ARM."]}),"\n",(0,a.jsx)(i.p,{children:"Da una parte, si potrebbe pensare di esercitarsi scrivendo assembler per la propria architettura, anzich\xe9 quella usata nel corso.\nSorgono diversi problemi:"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"dover imparare sintassi, meccanismi, registri completamente diversi;"}),"\n",(0,a.jsx)(i.li,{children:"dover fare a meno o reingegnerizzarsi la libreria usata per l'input-output a terminale;"}),"\n",(0,a.jsx)(i.li,{children:"dover comunque imparare l'assembler mostrato nel corso, perch\xe9 quella sar\xe0 richiesta all'esame e supportata dalle macchine in laboratorio."}),"\n"]}),"\n",(0,a.jsx)(i.p,{children:"La seconda opzione \xe8 usare strumenti di virtualizzazione capaci di far girare un sistema operativo con architettura diversa.\nSorge come principale problema l'ergonomicit\xe0 ed efficienza di questa soluzione, che dipende molto dagli strumenti che si trovano e dalle caratteristiche hardware della macchina, che potrebbero essere non sufficienti."}),"\n",(0,a.jsxs)(i.p,{children:["Per chi ha una macchina ARM, sar\xe0 necessario trovare soluzioni di virtualizzazione o usare un'altra macchina dedicata (va bene qualunque cosa di qualunque potenza, purch\xe9 ",(0,a.jsx)(i.code,{children:"x86"}),").\nIn ogni caso, ",(0,a.jsx)(i.em,{children:"non offriamo nessun supporto diretto"})," a tali macchine.\nLo ribadisco in rosso, perch\xe9 chiesto spesso."]}),"\n",(0,a.jsxs)(i.admonition,{type:"danger",children:[(0,a.jsxs)(i.mdxAdmonitionTitle,{children:[(0,a.jsx)("u",{children:"Nessun supporto diretto"})," per Mac con ARM"]}),(0,a.jsxs)(i.p,{children:["Non testiamo n\xe9 supportiamo ambienti per Mac con ARM, che non abbiamo a disposizione.\n",(0,a.jsx)(i.em,{children:"Ci \xe8 stato detto"})," che ",(0,a.jsx)(i.a,{href:"https://mac.getutm.app/",children:"UTM"})," pu\xf2 emulare l'architettura x86, affermazione che riportiamo senza alcuna garanzia.\nNon risponderemo a ulteriori domande a riguardo, soprattutto se parte delle ",(0,a.jsx)(i.a,{href:"/esercitazioni/Assembler/Problemi%20comuni",children:"domande frequenti"}),"."]})]}),"\n",(0,a.jsx)(i.p,{children:"Oltre a questioni di architettura, abbiamo anche il sistema operativo, che \xe8 rilevante per gestire input e output da terminale.\nI programmi che scriveremo ed eseguiremo, cos\xec come quelli utilizzati per assemblare, gireranno in un terminale Linux.\nNei pacchetti forniti e in sede di esame, si usa in particolare Ubuntu 24.04."}),"\n",(0,a.jsx)(i.admonition,{title:"Perch\xe9 Linux?",type:"note",children:(0,a.jsx)(i.p,{children:"Perch\xe9 \xe8 molto pi\xf9 facile virtualizzare un ambiente Linux moderno in Windows o Mac che il contrario.\nIn precedenza si usava MS-DOS, un sistema del 1981 facilmente emulabile, ma molto limitante data l'et\xe0."})}),"\n",(0,a.jsxs)(i.p,{children:["Per assemblare, si usa ",(0,a.jsx)(i.code,{children:"gcc"}),", per debuggare ",(0,a.jsx)(i.code,{children:"gdb"}),".\nPer usarli per\xf2 sono necessari comandi ",(0,a.jsx)(i.em,{children:"lunghi"}),", che semplifichiamo usando script Powershell ",(0,a.jsx)(i.code,{children:"assemble.ps1"})," e ",(0,a.jsx)(i.code,{children:"debug.ps1"}),"."]}),"\n",(0,a.jsx)(i.admonition,{title:"Perch\xe9 Powershell?",type:"note",children:(0,a.jsxs)(i.p,{children:["Perch\xe9 Powershell (2006) \xe8 object-oriented, e permette di scrivere script leggibili e manutenibili, in modo semplice.\nBash (1989) \xe8 invece text-oriented, con una ",(0,a.jsx)(i.a,{href:"https://mywiki.wooledge.org/BashPitfalls",children:"lunga lista di trappole da saper evitare"}),"."]})}),"\n",(0,a.jsxs)(i.admonition,{title:"32 vs 64 bit",type:"info",children:[(0,a.jsxs)(i.p,{children:["In realt\xe0, i processori x86 a ",(0,a.jsx)(i.em,{children:"soli"})," 32 bit non sono pi\xf9 in commercio da vent'anni.\nI processori che si trovano oggi sono x64, a 64 bit, e sono in grado di eseguire codice a 32 bit per retrocompatibilit\xe0.\nNel corso, continuiamo ad usare l'istruction set a 32 bit perch\xe9"]}),(0,a.jsxs)(i.ol,{children:["\n",(0,a.jsx)(i.li,{children:"\xe8 di complessit\xe0 ridotta e sufficiente per i nostri scopi didattici,"}),"\n",(0,a.jsxs)(i.li,{children:["il vecchio ambiente DOS, che qualcuno pu\xf2 trovare ancora utile, supporta ",(0,a.jsx)(i.em,{children:"solo"})," x86."]}),"\n"]})]}),"\n",(0,a.jsx)(i.h2,{id:"ambiente-verilog",children:"Ambiente Verilog"}),"\n",(0,a.jsx)(i.p,{children:"L'ambiente Verilog non ha i problemi di quello assembler, perch\xe9 quel che compiliamo (una rete simulabile) non \xe8 legato sistema operativo o all'architettura della CPU.\nBasta che si riescano ad installare"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"iverilog"})," e ",(0,a.jsx)(i.code,{children:"vvp"})]}),"\n",(0,a.jsx)(i.li,{children:"GTKWave"}),"\n"]}),"\n",(0,a.jsx)(i.h2,{id:"versioni-dellambiente-e-alternative",children:"Versioni dell'ambiente e alternative"}),"\n",(0,a.jsxs)(i.admonition,{type:"info",children:[(0,a.jsx)(i.p,{children:"L'ambiente dell'A.A. 2025/26 \xe8 leggermente diverso da quello degli anni precedenti.\nLe differenze riguardano solo aspetti di installazione e configurazione, il modo di utilizzo rimane pressoch\xe9 invariato."}),(0,a.jsx)(i.p,{children:"Se si ha gi\xe0 un ambiente funzionante, non c'\xe8 bisogno di fare nulla."})]}),"\n",(0,a.jsx)(i.p,{children:"L'ambiente \xe8 fornito in due versioni:"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"Windows 11 + WSL2"}),"\n",(0,a.jsxs)(i.li,{children:["Linux nativo ",(0,a.jsx)(i.em,{children:"o"})," devcontainer"]}),"\n"]}),"\n",(0,a.jsxs)(i.p,{children:["Questi contengono sia istruzioni per installazione e configurazione, sia le cartelle ",(0,a.jsx)(i.code,{children:"assembler"})," e ",(0,a.jsx)(i.code,{children:"verilog"})," con i file necessari per scrivere codice."]}),"\n",(0,a.jsx)(i.admonition,{type:"tip",children:(0,a.jsx)(i.p,{children:"Tenere presente che non c'\xe8 bisogno di utilizzare lo stesso tipo di pacchetto o macchina per assembler e Verilog, le due scelte sono indipendenti."})}),"\n",(0,a.jsx)(i.h2,{id:"ambiente-per-windows-11--wsl2",children:"Ambiente per Windows 11 + WSL2"}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.a,{href:"pathname:///2025-26/ambiente/reti-logiche-windows-2025-10-01.zip",children:"Download"})}),"\n",(0,a.jsx)(i.p,{children:"Questo pacchetto supporta macchine Windows 11 x64, utilizza WSL2 per virtuallizare un sistema Ubuntu 24.04 per assembler, e applicazioni native per Verilog."}),"\n",(0,a.jsxs)(i.p,{children:["WSL2 \xe8 un sottosistema di Windows che permette di virtualizzare macchine Linux in modo semplice, e l'integrazione con VS Code tramite ",(0,a.jsx)(i.a,{href:"https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl",children:"l'estensione WSL"})," permette di scrivere codice ",(0,a.jsx)(i.em,{children:"fuori"})," dalla macchina virtuale ed assemblare ed eseguire ",(0,a.jsx)(i.em,{children:"dentro"})," la macchina virtuale.\nQuesto ci permette di mantenere un ambiente grafico moderno mentre si lavora con un terminare Linux virtualizzato."]}),"\n",(0,a.jsxs)("figure",{children:[(0,a.jsx)("img",{src:(0,t.Ay)("2025-26/img/assembler/ambiente/ambiente-wsl.drawio.png"),style:{maxWidth:"min(100%, 24rem)"},alt:"\nLo schema mostra un host Windows 11 (x86), che esegue sia l'editor VS Code che l'ambiente virtuale WSL2 (x86).\nAll'interno di WSL2, il sistema operativo eseguito \xe8 Ubuntu 24.04.\nL'editor VS Code \xe8 collegato direttamente al sistema virtualizzato: il terminale mostrato nell'editor \xe8 di Ubuntu, e non di Windows.\n",title:"\nL'host Windows 11 esegue sia l'editor VS Code che l'ambiente virtuale WSL2 (x86).\nL'editor VS Code \xe8 collegato direttamente al sistema virtualizzato: il terminale mostrato nell'editor \xe8 di Ubuntu, e non di Windows.\n"}),(0,a.jsx)("figcaption",{children:(0,a.jsx)(i.p,{children:"Schema dell'ambiente usato all'esame."})})]}),"\n",(0,a.jsxs)(i.p,{children:["Il pacchetto dell'ambiente contiene le istruzioni passo passo per installare e configurare la macchina virtuale ",(0,a.jsx)("u",{children:"su una macchina Windows 11 con architettura x86"}),"."]}),"\n",(0,a.jsxs)(i.p,{children:["Per l'ambiente Verilog, invece, ci sono sia installer precompilati ",(0,a.jsx)(i.a,{href:"https://bleyer.org/icarus/",children:"qui"})," che codice sorgente ",(0,a.jsx)(i.a,{href:"https://github.com/steveicarus/iverilog",children:"qui"})," e ",(0,a.jsx)(i.a,{href:"https://github.com/gtkwave/gtkwave",children:"qui"}),"."]}),"\n",(0,a.jsxs)(i.h2,{id:"ambiente-per-linux-nativo-o-devcontainer",children:["Ambiente per Linux nativo ",(0,a.jsx)(i.em,{children:"o"})," devcontainer"]}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.a,{href:"pathname:///2025-26/ambiente/reti-logiche-linux-devcontainer-2025-10-06.zip",children:"Download"})}),"\n",(0,a.jsxs)(i.p,{children:["Questo pacchetto supporta due scenari: una macchina con Linux x64, oppure ",(0,a.jsx)(i.a,{href:"https://code.visualstudio.com/docs/devcontainers/containers",children:"devcontainers"})," tramite Docker."]}),"\n",(0,a.jsxs)(i.p,{children:["Il pacchetto contiene le cartelle ",(0,a.jsx)(i.code,{children:"assembler"})," e ",(0,a.jsx)(i.code,{children:"verilog"})," con i file necessari per scrivere codice."]}),"\n",(0,a.jsx)(i.h3,{id:"utilizzo-nativo",children:"Utilizzo nativo"}),"\n",(0,a.jsx)(i.p,{children:"Per assembler, l'ambiente Linux deve essere in grado di"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:["Eseguire gli script ",(0,a.jsx)(i.code,{children:"powershell"})," dell'ambiente"]}),"\n",(0,a.jsxs)(i.li,{children:["Assemblare, usando ",(0,a.jsx)(i.code,{children:"gcc"}),", programmi x86 scritti con sintassi ",(0,a.jsx)(i.em,{children:"GAS"})]}),"\n",(0,a.jsx)(i.li,{children:"Eseguire programmi x86"}),"\n",(0,a.jsxs)(i.li,{children:["Debuggarli usando ",(0,a.jsx)(i.code,{children:"gdb"})]}),"\n"]}),"\n",(0,a.jsx)(i.p,{children:"Per far questo su Ubuntu 24.04, i pacchetti da installare sono"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:(0,a.jsx)(i.code,{children:"build-essential"})}),"\n",(0,a.jsx)(i.li,{children:(0,a.jsx)(i.code,{children:"gcc-multilib"})}),"\n",(0,a.jsx)(i.li,{children:(0,a.jsx)(i.code,{children:"gdb"})}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"powershell"})," (",(0,a.jsx)(i.a,{href:"https://learn.microsoft.com/en-us/powershell/scripting/install/install-ubuntu?view=powershell-7.5",children:"guida"}),")"]}),"\n"]}),"\n",(0,a.jsx)(i.p,{children:"Per Verilog, l'ambiente Linux deve essere in grado di"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:["Compilare simulazioni con ",(0,a.jsx)(i.code,{children:"iverilog"})]}),"\n",(0,a.jsxs)(i.li,{children:["Eseguire simulazioni con ",(0,a.jsx)(i.code,{children:"vvp"})]}),"\n",(0,a.jsxs)(i.li,{children:["Visualizzare waveform con ",(0,a.jsx)(i.code,{children:"gtkwave"})]}),"\n"]}),"\n",(0,a.jsx)(i.p,{children:"Per far questo su Ubuntu 24.04, i pacchetti da installare sono"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:(0,a.jsx)(i.code,{children:"iverilog"})}),"\n",(0,a.jsx)(i.li,{children:(0,a.jsx)(i.code,{children:"gtkwave"})}),"\n"]}),"\n",(0,a.jsx)(i.admonition,{title:"Altro software per installazioni minime",type:"info",children:(0,a.jsxs)(i.p,{children:["Script e istruzioni si basano anche su due altri programmi: ",(0,a.jsx)(i.code,{children:"wget"})," e ",(0,a.jsx)(i.code,{children:"file"}),".\nDi solito sono inclusi di default per installazioni Desktop, ma su installazioni minime (come l'immagine Docker di Ubuntu 24.04) vanno installati manualmente."]})}),"\n",(0,a.jsx)(i.p,{children:"Una volta installato il software richiesto, per sviluppare baster\xe0 aprire le cartelle con VS Code."}),"\n",(0,a.jsx)(i.h3,{id:"utilizzo-tramite-devcontainer",children:"Utilizzo tramite devcontainer"}),"\n",(0,a.jsxs)(i.p,{children:["I ",(0,a.jsx)(i.a,{href:"https://code.visualstudio.com/docs/devcontainers/containers",children:(0,a.jsx)(i.code,{children:"devcontainer"})})," sono un'altra forma di virtualizzazione integrata in VS Code, basata su Docker anzich\xe9 WSL.\nIl pacchetto include, nelle cartelle ",(0,a.jsx)(i.code,{children:".devcontainer"}),", i ",(0,a.jsx)(i.code,{children:"Dockerfile"})," che installano il software necessario su immagini Ubuntu 24.04."]}),"\n",(0,a.jsx)(i.p,{children:'Una volta aperta la cartella con VS Code, usare il comando "Riapri in devcontainer".'}),"\n",(0,a.jsx)(i.h2,{id:"alternative-fai-da-te",children:"Alternative fai da te"}),"\n",(0,a.jsxs)(i.p,{children:["Un'altra opzione molto utile di VS Code \xe8 lo sviluppo remoto tramite ",(0,a.jsx)(i.a,{href:"https://code.visualstudio.com/docs/remote/ssh",children:(0,a.jsx)(i.code,{children:"SSH"})})," usando ",(0,a.jsx)(i.a,{href:"https://code.visualstudio.com/docs/remote/ssh",children:"questa estensione"}),".\nIn questo caso, invece di collegarsi a un ambiente di sviluppo virtualizzato, questo risiede su un'altra macchina a cui ci si collega aprendo un terminale SSH."]}),"\n",(0,a.jsxs)("figure",{children:[(0,a.jsx)("img",{src:(0,t.Ay)("2025-26/img/assembler/ambiente/ambiente-ssh.drawio.png"),style:{maxWidth:"min(100%, 38rem)"},alt:"\nLo schema mostra due host distinti.\nIl primo \xe8 l'host che esegue VS Code, che pu\xf2 essere di qualunque tipo e architettura.\nIl secondo \xe8 l'host Linux (di qualunque distribuzione) di architettura x86, che esegue il terminale.\nL'editor VS Code si collega al terminale dell'host Linux utilizzando SSH.\n",title:"\nI due host sono distinti, permettendo di eseguire sistemi operativi diversi.\nL'unico vincolo \xe8 la configurazione della connessione via SSH.\n"}),(0,a.jsx)("figcaption",{children:(0,a.jsx)(i.p,{children:"Schema di un ambiente che usa SSH."})})]}),"\n",(0,a.jsx)(i.p,{children:'Da notare che le macchine sono distinte "concettualmente": niente ci vieta di avere una macchina virtuale (e.g. VirtualBox) al posto di una macchina fisicamente distinta.'}),"\n",(0,a.jsx)(i.h2,{id:"testare-gli-ambienti",children:"Testare gli ambienti"}),"\n",(0,a.jsxs)(i.p,{children:["I pacchetti includono dei file per ",(0,a.jsx)(i.em,{children:"testare"})," che l'ambiente sia utilizzabile."]}),"\n",(0,a.jsx)(i.h3,{id:"assembler",children:"Assembler"}),"\n",(0,a.jsxs)(i.p,{children:["Il file ",(0,a.jsx)(i.code,{children:"test-ambiente.s"})," contiene il codice di un semplice programma che si limita a stampare ",(0,a.jsx)(i.code,{children:"Ok."}),".\nProvare ad assemblarlo, eseguirlo e debuggarlo."]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{children:"PS /workspaces/assembler> ./assemble.ps1 ./test-ambiente.s\nPS /workspaces/assembler> ./test-ambiente                 \nOk.\nPS /workspaces/assembler> ./debug.ps1 ./test-ambiente\nGNU gdb (Ubuntu 15.0.50.20240403-0ubuntu1) 15.0.50.20240403-git\n[output di poca utilit\xe0]\nBreakpoint 1, _main () at /workspaces/assembler/test-ambiente.s:7\n7       _main:  nop\n(gdb) qq\nPS /workspaces/assembler> \n"})}),"\n",(0,a.jsx)(i.h3,{id:"verilog",children:"Verilog"}),"\n",(0,a.jsxs)(i.p,{children:["Il file ",(0,a.jsx)(i.code,{children:"test-ambiente.v"})," contiene il codice di una semplice testbench con registro da 1 bit che cambia valore, e stampa ",(0,a.jsx)(i.code,{children:"Ok."})," a terminale prima di terminare.\nProvare a compilare ed eseguire la simulazione, e poi osservarne la waveform."]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{children:"PS /workspaces/verilog> iverilog -o sim ./test-ambiente.v \nPS /workspaces/verilog> vvp ./sim  \nVCD info: dumpfile waveform.vcd opened for output.\nOk.\n./test-ambiente.v:10: $finish called at 20 (1s)\nPS /workspaces/verilog> gtkwave ./waveform.vcd  \n[output di poca utilit\xe0]\nPS /workspaces/verilog>\n"})})]})}function u(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>t,x:()=>o});var r=n(96540);const a={},s=r.createContext(a);function t(e){const i=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),r.createElement(s.Provider,{value:i},e.children)}}}]);