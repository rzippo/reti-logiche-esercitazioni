"use strict";(self.webpackChunkreti_logiche_esercitazioni=self.webpackChunkreti_logiche_esercitazioni||[]).push([[8183],{7442:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>d,default:()=>x,frontMatter:()=>t,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"esercitazioni/Verilog/Documentazione/Operatori","title":"Operatori","description":"","source":"@site/docs/esercitazioni/Verilog/Documentazione/2. Operatori.mdx","sourceDirName":"esercitazioni/Verilog/Documentazione","slug":"/esercitazioni/Verilog/Documentazione/Operatori","permalink":"/reti-logiche-esercitazioni/esercitazioni/Verilog/Documentazione/Operatori","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"description":""},"sidebar":"esercitazioniSidebar","previous":{"title":"Introduzione","permalink":"/reti-logiche-esercitazioni/esercitazioni/Verilog/Documentazione/Introduzione"},"next":{"title":"Sintassi per reti combinatorie","permalink":"/reti-logiche-esercitazioni/esercitazioni/Verilog/Documentazione/Sintassi per reti combinatorie"}}');var o=n(4848),s=n(8453),a=n(6025);const t={description:""},d="Operatori",l={},c=[{value:"Valori letterali (<em>literal values</em>)",id:"valori-letterali-literal-values",level:2},{value:"Estensione e troncamento",id:"estensione-e-troncamento",level:3},{value:"Operatori aritmetici",id:"operatori-aritmetici",level:2},{value:"Operatori logici e <em>bitwise</em>",id:"operatori-logici-e-bitwise",level:2},{value:"<em>Reduction operators</em>",id:"reduction-operators",level:3},{value:"Operatore di selezione <code>[...]</code>",id:"operatore-di-selezione-",level:2},{value:"Operatore di concatenazione <code>{...}</code>",id:"operatore-di-concatenazione-",level:2},{value:"Operatore di replicazione <code>N{...}</code>",id:"operatore-di-replicazione-n",level:3},{value:"Operazioni comuni",id:"operazioni-comuni",level:2},{value:"Estensione di segno",id:"estensione-di-segno",level:3},{value:"Shift a destra e sinistra",id:"shift-a-destra-e-sinistra",level:3}];function h(e){const i={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.header,{children:(0,o.jsx)(i.h1,{id:"operatori",children:"Operatori"})}),"\n",(0,o.jsxs)(i.h2,{id:"valori-letterali-literal-values",children:["Valori letterali (",(0,o.jsx)(i.em,{children:"literal values"}),")"]}),"\n",(0,o.jsxs)(i.p,{children:["In ogni linguaggio, i ",(0,o.jsx)(i.em,{children:"literal values"})," sono quelle parti del codice che rappresentano valori costanti.\r\nPer ovvi motivi, in Verilog questi sono principalmente stringhe di bit."]}),"\n",(0,o.jsx)(i.p,{children:"La definizione (completa) di un valore letterale \xe8 data da"}),"\n",(0,o.jsxs)(i.ol,{children:["\n",(0,o.jsx)(i.li,{children:"dimensione in bit"}),"\n",(0,o.jsx)(i.li,{children:"formato di rappresentazione"}),"\n",(0,o.jsx)(i.li,{children:"valore"}),"\n"]}),"\n",(0,o.jsxs)(i.p,{children:["Per esempio, ",(0,o.jsx)(i.code,{children:"4'b0100"})," indica un valore di 4 bit, espressi in notazione ",(0,o.jsx)(i.em,{children:"binaria"}),", il cui valore in binario \xe8 ",(0,o.jsx)(i.code,{children:"0100"}),".\r\nLe altre notazioni che useremo sono ",(0,o.jsx)(i.code,{children:"d"})," per decimale (",(0,o.jsx)(i.code,{children:"4'd7"})," corrisponde al binario ",(0,o.jsx)(i.code,{children:"0111"}),") e ",(0,o.jsx)(i.code,{children:"h"})," per esadecimale (",(0,o.jsx)(i.code,{children:"8'had"})," corrisponde al binario ",(0,o.jsx)(i.code,{children:"10101101"}),")."]}),"\n",(0,o.jsx)(i.h3,{id:"estensione-e-troncamento",children:"Estensione e troncamento"}),"\n",(0,o.jsxs)(i.p,{children:["Verilog automaticamente estende e tronca i letterali la cui parte valore \xe8 sovra o sottospecificata rispetto al numero di bit.\r\nPer esempio, ",(0,o.jsx)(i.code,{children:"4'b0"})," viene automaticamente esteso a ",(0,o.jsx)(i.code,{children:"4'b0000"}),", mentre ",(0,o.jsx)(i.code,{children:"6'had"})," viene automaticamente troncato a ",(0,o.jsx)(i.code,{children:"6'b101101"}),"."]}),"\n",(0,o.jsx)(i.h2,{id:"operatori-aritmetici",children:"Operatori aritmetici"}),"\n",(0,o.jsxs)(i.p,{children:["Il Verilog supporta molti degli operatori comuni, che possiamo usare in espressioni combinatorie: ",(0,o.jsx)(i.code,{children:"+"}),", ",(0,o.jsx)(i.code,{children:"-"}),", ",(0,o.jsx)(i.code,{children:"*"}),", ",(0,o.jsx)(i.code,{children:"/"}),", ",(0,o.jsx)(i.code,{children:"%"}),", ",(0,o.jsx)(i.code,{children:"<"}),", ",(0,o.jsx)(i.code,{children:">"})," ",(0,o.jsx)(i.code,{children:"<="}),", ",(0,o.jsx)(i.code,{children:">="}),", ",(0,o.jsx)(i.code,{children:"=="}),"."]}),"\n",(0,o.jsx)(i.p,{children:"Prestare attenzione, per\xf2, ai dimensionamenti in bit degli operandi e a come Verilog li estende per eseguire le operazioni."}),"\n",(0,o.jsxs)(i.h2,{id:"operatori-logici-e-bitwise",children:["Operatori logici e ",(0,o.jsx)(i.em,{children:"bitwise"})]}),"\n",(0,o.jsxs)(i.p,{children:["Verilog supporta i classici operatori logici ",(0,o.jsx)(i.code,{children:"&&"}),", ",(0,o.jsx)(i.code,{children:"||"})," e ",(0,o.jsx)(i.code,{children:"!"}),".\r\nQuesti lavorano su valori booleani (",(0,o.jsx)(i.code,{children:"0"})," \xe8 ",(0,o.jsx)(i.code,{children:"false"}),", diverso da zero \xe8 ",(0,o.jsx)(i.code,{children:"true"}),"), e producono un solo bit come risultato."]}),"\n",(0,o.jsxs)(i.p,{children:["Questi vanno distinti dagli operatori ",(0,o.jsx)(i.em,{children:"bitwise"})," (in italiano ",(0,o.jsx)(i.em,{children:"bit a bit"}),"), lavorano per un bit alla volta (e per bit corrispondenti) producendo un risultato delle stesse dimensioni degli operandi."]}),"\n",(0,o.jsxs)(i.table,{children:[(0,o.jsx)(i.thead,{children:(0,o.jsxs)(i.tr,{children:[(0,o.jsx)(i.th,{children:"Operatore"}),(0,o.jsx)(i.th,{children:"Tipo di operazione"})]})}),(0,o.jsxs)(i.tbody,{children:[(0,o.jsxs)(i.tr,{children:[(0,o.jsx)(i.td,{children:(0,o.jsx)(i.code,{children:"&"})}),(0,o.jsx)(i.td,{children:"and"})]}),(0,o.jsxs)(i.tr,{children:[(0,o.jsx)(i.td,{children:(0,o.jsx)(i.code,{children:"~&"})}),(0,o.jsx)(i.td,{children:"nand"})]}),(0,o.jsxs)(i.tr,{children:[(0,o.jsx)(i.td,{children:(0,o.jsx)(i.code,{children:"|"})}),(0,o.jsx)(i.td,{children:"or"})]}),(0,o.jsxs)(i.tr,{children:[(0,o.jsx)(i.td,{children:(0,o.jsx)(i.code,{children:"~|"})}),(0,o.jsx)(i.td,{children:"nor"})]}),(0,o.jsxs)(i.tr,{children:[(0,o.jsx)(i.td,{children:(0,o.jsx)(i.code,{children:"^"})}),(0,o.jsx)(i.td,{children:"xor"})]}),(0,o.jsxs)(i.tr,{children:[(0,o.jsx)(i.td,{children:(0,o.jsx)(i.code,{children:"~^"})}),(0,o.jsx)(i.td,{children:"xnor"})]}),(0,o.jsxs)(i.tr,{children:[(0,o.jsx)(i.td,{children:(0,o.jsx)(i.code,{children:"~"})}),(0,o.jsx)(i.td,{children:"not"})]})]})]}),"\n",(0,o.jsxs)(i.admonition,{type:"info",children:[(0,o.jsxs)(i.mdxAdmonitionTitle,{children:["Come scrivere la tilde ",(0,o.jsx)(i.code,{children:"~"})]}),(0,o.jsx)(i.p,{children:"Nel layout di tastiera QWERTY internazionale, la tilde ha un tasto dedicato, a sinistra dell'1."}),(0,o.jsx)("img",{src:(0,a.Ay)("img/verilog/qwerty-tilde.png"),alt:"",style:{maxWidth:"10rem"}}),(0,o.jsx)(i.p,{children:"Nel layout di tastiera QWERTY italiano, invece, la tilde non \xe8 presente.\r\nCi sono 3 opzioni:"}),(0,o.jsxs)(i.ol,{children:["\n",(0,o.jsx)(i.li,{children:"passare al layout a QWERTY internazionale"}),"\n",(0,o.jsx)(i.li,{children:"imparare scorciatoie alternative, che dipendono dal sistema operativo"}),"\n",(0,o.jsx)(i.li,{children:"usare scripting come AutoHotkey per personalizzare il layout"}),"\n"]}),(0,o.jsxs)(i.p,{children:["L'opzione 1 richiede di imparare un layout diverso, ma \xe8 consigliabile per tutti gli usi di programmazione (risolve altri problemi come il backtick ",(0,o.jsx)(i.code,{children:"`"})," e rende pi\xf9 semplici da scrivere ",(0,o.jsx)(i.code,{children:"[]{};"}),")."]}),(0,o.jsxs)(i.p,{children:["L'opzione 2 varia da sistema a sistema. Su Windows, la combinazione di tasti \xe8 ",(0,o.jsx)(i.code,{children:"alt + 126"}),", facendo attenzione a digitare il numero usando il tastierino numerico e ",(0,o.jsx)(i.em,{children:"non"})," la riga dei numeri."]}),(0,o.jsxs)(i.p,{children:["L'opzione 3 non \xe8 utilizzabile all'esame. Per uso personale, vedere ",(0,o.jsx)(i.a,{href:"https://superuser.com/questions/667622/italian-keyboard-entering-tilde-and-backtick-characters-without-changin",children:"qui"}),"."]})]}),"\n",(0,o.jsx)(i.h3,{id:"reduction-operators",children:(0,o.jsx)(i.em,{children:"Reduction operators"})}),"\n",(0,o.jsxs)(i.p,{children:["I ",(0,o.jsx)(i.em,{children:"reduction operators"})," applicano un'operazione tra tutti i bit di un elemento di pi\xf9 bit, producendo un risultato su un solo bit.\r\nSia per esempio ",(0,o.jsx)(i.code,{children:"x"})," di valore ",(0,o.jsx)(i.code,{children:"4'b0100"}),", allora la sua riduzione and ",(0,o.jsx)(i.code,{children:"&x"}),", equivalente a ",(0,o.jsx)(i.code,{children:"x[3] & x[2] & x[1] & x[0]"}),", varr\xe0 ",(0,o.jsx)(i.code,{children:"1'b0"}),"; mentre la sua riduzione or, ",(0,o.jsx)(i.code,{children:"|x"}),", varr\xe0\t",(0,o.jsx)(i.code,{children:"1'b1"}),".\r\nLe riduzioni possono rendere alcune espressioni combinatorie pi\xf9 semplici da scrivere."]}),"\n",(0,o.jsxs)(i.table,{children:[(0,o.jsx)(i.thead,{children:(0,o.jsxs)(i.tr,{children:[(0,o.jsx)(i.th,{children:"Operatore"}),(0,o.jsx)(i.th,{children:"Tipo di riduzione"})]})}),(0,o.jsxs)(i.tbody,{children:[(0,o.jsxs)(i.tr,{children:[(0,o.jsx)(i.td,{children:(0,o.jsx)(i.code,{children:"&"})}),(0,o.jsx)(i.td,{children:"and"})]}),(0,o.jsxs)(i.tr,{children:[(0,o.jsx)(i.td,{children:(0,o.jsx)(i.code,{children:"~&"})}),(0,o.jsx)(i.td,{children:"nand"})]}),(0,o.jsxs)(i.tr,{children:[(0,o.jsx)(i.td,{children:(0,o.jsx)(i.code,{children:"|"})}),(0,o.jsx)(i.td,{children:"or"})]}),(0,o.jsxs)(i.tr,{children:[(0,o.jsx)(i.td,{children:(0,o.jsx)(i.code,{children:"~|"})}),(0,o.jsx)(i.td,{children:"nor"})]}),(0,o.jsxs)(i.tr,{children:[(0,o.jsx)(i.td,{children:(0,o.jsx)(i.code,{children:"^"})}),(0,o.jsx)(i.td,{children:"xor"})]}),(0,o.jsxs)(i.tr,{children:[(0,o.jsx)(i.td,{children:(0,o.jsx)(i.code,{children:"~^"})}),(0,o.jsx)(i.td,{children:"xnor"})]})]})]}),"\n",(0,o.jsxs)(i.h2,{id:"operatore-di-selezione-",children:["Operatore di selezione ",(0,o.jsx)(i.code,{children:"[...]"})]}),"\n",(0,o.jsxs)(i.p,{children:["Quando si dichiara un elemento, come un ",(0,o.jsx)(i.code,{children:"wire"}),", si utilizza la notazione ",(0,o.jsx)(i.code,{children:"[N:0]"})," per indicare l'elemento ha N+1 bit, indicizzati da 0 a N.\r\nPer esempio, per dichiarare un filo da 8 bit, scriveremo"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-verilog",children:"wire [7:0] x;\n"})}),"\n",(0,o.jsxs)(i.p,{children:["Possiamo poi utilizza l'operatore per selezionare uno o pi\xf9 bit di un tale componente.\r\nPer esempio, possiamo scrivere ",(0,o.jsx)(i.code,{children:"x[2]"}),", che seleziona il bit di posizione 2 (",(0,o.jsx)(i.em,{children:"bit-select"}),"), e ",(0,o.jsx)(i.code,{children:"x[6:3]"}),", che seleziona i quattro bit dalla posizione 6 alla posizione 3 (",(0,o.jsx)(i.em,{children:"part-select"}),")."]}),"\n",(0,o.jsxs)(i.h2,{id:"operatore-di-concatenazione-",children:["Operatore di concatenazione ",(0,o.jsx)(i.code,{children:"{...}"})]}),"\n",(0,o.jsx)(i.p,{children:"L'operatore di concatenazione viene utilizzato per combinare due o pi\xf9 espressioni, vettori, o bit in un'unica entit\xe0."}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-verilog",children:"input [3:0] a, b;\r\nwire [7:0] ab;\r\nassign ab = {a, b};\n"})}),"\n",(0,o.jsx)(i.p,{children:"L'operatore pu\xf2 anche essere usato a sinistra di un assegnamento."}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-verilog",children:"input [7:0] x;\r\nwire [3:0] xh, xl;\r\nassign {xh, xl} = x;\n"})}),"\n",(0,o.jsx)(i.admonition,{title:"Raggruppare fili non ha nessun costo",type:"info",children:(0,o.jsxs)(i.p,{children:["Questo operatore corrisponde, circuitalmente, al semplice raggruppare dei fili assieme.\r\nNon \xe8 un'operazione combinatoria, e per questo non consuma tempo.\r\n\xc8 per questo che negli esempi sopra gli ",(0,o.jsx)(i.code,{children:"assign"})," non hanno alcun ritardo ",(0,o.jsx)(i.code,{children:"#T"}),"."]})}),"\n",(0,o.jsxs)(i.h3,{id:"operatore-di-replicazione-n",children:["Operatore di replicazione ",(0,o.jsx)(i.code,{children:"N{...}"})]}),"\n",(0,o.jsxs)(i.p,{children:["L'operatore di ripetizione semplifica il tipico caso d'uso di ripetere un bit o un gruppo di bit ",(0,o.jsx)(i.code,{children:"N"})," volte.\r\nSi pu\xf2 utilizzare solo all'interno di un concatenamento che sia a ",(0,o.jsx)(i.em,{children:"destra"})," di un assegnamento e con ",(0,o.jsx)(i.code,{children:"N"})," costante.\r\n\xc8 equivalente a scrivere ",(0,o.jsx)(i.code,{children:"N"})," volte ci\xf2 che si vuole ripetere."]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-verilog",children:"input [3:0] x;\r\nwire [15:0] x_repeated_4_times;\r\nassign x_repeated_4_times = {4{x}}; // equivalente a {x, x, x, x}\n"})}),"\n",(0,o.jsx)(i.p,{children:"Il suo uso pi\xf9 comune \xe8 l'estensione di segno di interi, mostrato pi\xf9 avanti."}),"\n",(0,o.jsx)(i.h2,{id:"operazioni-comuni",children:"Operazioni comuni"}),"\n",(0,o.jsx)(i.h3,{id:"estensione-di-segno",children:"Estensione di segno"}),"\n",(0,o.jsx)(i.p,{children:"Quando si estende un numero su pi\xf9 bit bisogna considerare se il numero \xe8 un naturale o un intero.\r\nPer estendere un naturale, basta aggiungere degli zeri."}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-verilog",children:"wire [7:0] x_8;\r\nwire [11:0] x_12;\r\nassign x_12 = {4'h0, x_8};\n"})}),"\n",(0,o.jsx)(i.p,{children:"Per estendere un intero, dobbiamo invere replicare il bit pi\xf9 significativo."}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-verilog",children:"wire [7:0] x_8;\r\nwire [11:0] x_12;\r\nassign x_12 = {4{x_8[7]}, x_8};\n"})}),"\n",(0,o.jsx)(i.h3,{id:"shift-a-destra-e-sinistra",children:"Shift a destra e sinistra"}),"\n",(0,o.jsx)(i.p,{children:"Per fare shift a destra e sinistra ci basta utilizzare gli operatori di selezione e concatenamento.\r\nLo shift a sinistra \xe8 lo stesso per numeri naturali e interi, posto che non ci sia overflow."}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-verilog",children:"input [7:0] x;\r\nwire [7:0] x_mul_4;\r\nassign x_mul_4 = {x[5:0], 2'b0};\n"})}),"\n",(0,o.jsx)(i.p,{children:"Lo shift a destra richiede invece di considerare il segno, se stiamo lavorando con interi."}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-verilog",children:"input [7:0] x; // rappresenta un numero naturale\r\nwire [7:0] x_div_4;\r\nassign x_div_4 = {2'b0, x[7:2]};\n"})}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-verilog",children:"input [7:0] x; // rappresenta un numero intero\r\nwire [7:0] x_div_4;\r\nassign x_div_4 = {2{x[7]}, x[7:2]};\n"})})]})}function x(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>a,x:()=>t});var r=n(6540);const o={},s=r.createContext(o);function a(e){const i=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function t(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:i},e.children)}}}]);