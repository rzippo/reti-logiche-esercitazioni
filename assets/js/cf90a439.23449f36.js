"use strict";(self.webpackChunkreti_logiche_esercitazioni=self.webpackChunkreti_logiche_esercitazioni||[]).push([[4672],{21532:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"esercitazioni/Assembler/Documentazione/Sezione DATA","title":"Sezione .data","description":"","source":"@site/versioned_docs/version-2025-26/esercitazioni/Assembler/Documentazione/8. Sezione DATA.mdx","sourceDirName":"esercitazioni/Assembler/Documentazione","slug":"/esercitazioni/Assembler/Documentazione/Sezione DATA","permalink":"/reti-logiche-esercitazioni/esercitazioni/Assembler/Documentazione/Sezione DATA","draft":false,"unlisted":false,"tags":[],"version":"2025-26","sidebarPosition":8,"frontMatter":{"title":"Sezione .data","description":""},"sidebar":"esercitazioniSidebar","previous":{"title":"Architettura x86","permalink":"/reti-logiche-esercitazioni/esercitazioni/Assembler/Documentazione/Architettura x86"},"next":{"title":"Istruzioni x86","permalink":"/reti-logiche-esercitazioni/esercitazioni/Assembler/Documentazione/Istruzioni x86"}}');var r=n(74848),o=n(28453);n(86025);const a={title:"Sezione .data",description:""},s="Sezione .data",l={},d=[{value:"Direttive di allocazione",id:"direttive-di-allocazione",level:2},{value:"Valori letterali",id:"valori-letterali",level:2}];function c(e){const i={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsxs)(i.h1,{id:"sezione-data",children:["Sezione ",(0,r.jsx)(i.code,{children:".data"})]})}),"\n",(0,r.jsxs)(i.p,{children:["Un programma assembler \xe8 tipicamente diviso in sezione ",(0,r.jsx)(i.code,{children:".data"}),", dove vengono allocato spazio in memoria a disposizione del programma, e sezione ",(0,r.jsx)(i.code,{children:".text"}),", dove viene indicata la sequenza di istruzione che compone il programma."]}),"\n",(0,r.jsxs)(i.p,{children:["La sezione data \xe8 tipicamente composta da una serie di dichiarazioni nella forma ",(0,r.jsx)(i.code,{children:"nomeVariabile: .tipo <parametri di inizializzazione>"}),".\r\nAlcuni esempi:"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-assembler",children:'.data\r\nvar1:   .long 5\r\nvar2:   .byte 0x2d, 0x01\r\nstr:    .asciz "Una stringa"\n'})}),"\n",(0,r.jsx)(i.p,{children:"Ciascuna direttiva non fa che allocare uno o pi\xf9 blocchi di memoria contigui della dimensione richiesta e con il contenuto iniziale richiesto."}),"\n",(0,r.jsxs)(i.p,{children:["Ciascuna ",(0,r.jsx)(i.em,{children:"label"})," non \xe8 che un indirizzo al primo byte di tale blocco contiguo di memoria.\r\nDato che l'architettura x86 \xe8 ",(0,r.jsx)(i.em,{children:"little-endian"}),", tale primo byte sar\xe0 il meno significativo."]}),"\n",(0,r.jsx)(i.h2,{id:"direttive-di-allocazione",children:"Direttive di allocazione"}),"\n",(0,r.jsxs)(i.table,{children:[(0,r.jsx)(i.thead,{children:(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.th,{children:"Tipo"}),(0,r.jsx)(i.th,{children:"Notazione"}),(0,r.jsx)(i.th,{children:"Descrizione"})]})}),(0,r.jsxs)(i.tbody,{children:[(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:"byte"}),(0,r.jsx)(i.td,{children:".byte V1 [, V2...]"}),(0,r.jsx)(i.td,{children:"Alloca uno o pi\xf9 byte, inizializzati con i valori forniti."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:"word"}),(0,r.jsx)(i.td,{children:".word V1 [, V2...]"}),(0,r.jsx)(i.td,{children:"Alloca uno o pi\xf9 word (2 byte), inizializzati con i valori forniti."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:"long"}),(0,r.jsx)(i.td,{children:".long V1 [, V2...]"}),(0,r.jsx)(i.td,{children:"Alloca uno o pi\xf9 long (4 byte), inizializzati con i valori forniti."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:"fill"}),(0,r.jsx)(i.td,{children:".fill n, l, v"}),(0,r.jsxs)(i.td,{children:["Alloca ",(0,r.jsx)(i.code,{children:"n"})," locazioni di ",(0,r.jsx)(i.code,{children:"l"})," byte ciascuno e inizializzati a ",(0,r.jsx)(i.code,{children:"v"}),". ",(0,r.jsx)(i.code,{children:"l"})," e ",(0,r.jsx)(i.code,{children:"v"})," si possono omettere, di default sono 1 e 0."]})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:"ascii"}),(0,r.jsx)(i.td,{children:'.ascii "str"'}),(0,r.jsxs)(i.td,{children:["Alloca la stringa ",(0,r.jsx)(i.code,{children:"str"}),", 1 byte per carattere."]})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:"asciz"}),(0,r.jsx)(i.td,{children:'.asciz "str"'}),(0,r.jsxs)(i.td,{children:["Alloca la stringa ",(0,r.jsx)(i.code,{children:"str"}),", 1 byte per carattere, aggiungendo un byte ",(0,r.jsx)(i.code,{children:"0x00"})," in fondo."]})]})]})]}),"\n",(0,r.jsxs)(i.p,{children:["L'assemblatore supporta anche altre direttive e usi pi\xf9 complessi.\r\nPer maggiori informazioni, la documentazione ufficiale \xe8 ",(0,r.jsx)(i.a,{href:"https://sourceware.org/binutils/docs/as/Pseudo-Ops.html",children:"qui"}),"."]}),"\n",(0,r.jsx)(i.h2,{id:"valori-letterali",children:"Valori letterali"}),"\n",(0,r.jsxs)(i.p,{children:["Il contenuto di ciascuna allocazione \xe8 definito tramite valori letterali, che devono essere ",(0,r.jsx)(i.em,{children:"costanti"})," note o derivabili a tempo di compilazione."]}),"\n",(0,r.jsxs)(i.table,{children:[(0,r.jsx)(i.thead,{children:(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.th,{children:"Tipo"}),(0,r.jsx)(i.th,{children:"Esempio"}),(0,r.jsx)(i.th,{children:"Descrizione"})]})}),(0,r.jsxs)(i.tbody,{children:[(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:"Decimale"}),(0,r.jsx)(i.td,{children:".byte 2"}),(0,r.jsx)(i.td,{children:"Costante in notazione decimale."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:"Esadecimale"}),(0,r.jsx)(i.td,{children:".byte 0x0d"}),(0,r.jsx)(i.td,{children:"Costante in notazione esadecimale."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:"Binario"}),(0,r.jsx)(i.td,{children:".byte 0b00001101"}),(0,r.jsx)(i.td,{children:"Costante in notazione binaria."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:"ASCII"}),(0,r.jsx)(i.td,{children:".byte 'a', '\\r'"}),(0,r.jsx)(i.td,{children:"Costante in notazione ASCII, il carattere viene tradotto nel byte corrispondente."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:"label"}),(0,r.jsx)(i.td,{children:".long val0"}),(0,r.jsx)(i.td,{children:"Indirizzo corrispondente a un'altra label."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:"label e offset"}),(0,r.jsx)(i.td,{children:".long val0+1"}),(0,r.jsx)(i.td,{children:"Indirizzo corrispondente a un'altra label, pi\xf9 offset. La scala \xe8 sempre 1."})]})]})]}),"\n",(0,r.jsxs)(i.admonition,{title:"Attenzione alle dimensioni",type:"warning",children:[(0,r.jsx)(i.p,{children:"I valori letterali vengono automaticamente troncati o estesi per rientrare nelle dimensioni specificate dalla direttiva."}),(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-assembler",children:".data\r\nb1: .byte 0x0d0e # viene troncato a 0x0e\r\nw1: .word 0x0d   # viene esteso a 0x000d\r\nw2: .word 0xf1   # viene esteso a 0x00f1\n"})})]})]})}function h(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>a,x:()=>s});var t=n(96540);const r={},o=t.createContext(r);function a(e){const i=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(o.Provider,{value:i},e.children)}}}]);