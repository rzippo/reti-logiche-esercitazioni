"use strict";(self.webpackChunkreti_logiche_esercitazioni=self.webpackChunkreti_logiche_esercitazioni||[]).push([[3889],{53934:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"esercitazioni/Assembler/Ambiente","title":"Ambiente","description":"","source":"@site/docs/esercitazioni/Assembler/2. Ambiente.mdx","sourceDirName":"esercitazioni/Assembler","slug":"/esercitazioni/Assembler/Ambiente","permalink":"/reti-logiche-esercitazioni/esercitazioni/Assembler/Ambiente","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"description":""},"sidebar":"esercitazioniSidebar","previous":{"title":"Assembler","permalink":"/reti-logiche-esercitazioni/category/assembler"},"next":{"title":"Esercitazioni","permalink":"/reti-logiche-esercitazioni/category/esercitazioni"}}');var a=n(74848),s=n(28453),t=n(86025);const o={sidebar_position:2,description:""},l="Ambiente di sviluppo",c={},d=[{value:"Attenzione all&#39;architettura",id:"attenzione-allarchitettura",level:2},{value:"Struttura dell&#39;ambiente",id:"struttura-dellambiente",level:2},{value:"Requisiti minimi",id:"requisiti-minimi",level:3},{value:"Lanciare l&#39;ambiente e primo programma",id:"lanciare-lambiente-e-primo-programma",level:2}];function m(e){const i={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.header,{children:(0,a.jsx)(i.h1,{id:"ambiente-di-sviluppo",children:"Ambiente di sviluppo"})}),"\n",(0,a.jsxs)(i.p,{children:["In questo corso, programmeremo assembler per architettura x86, a 32 bit.\r\nUseremo la sintassi ",(0,a.jsx)(i.em,{children:"GAS"})," (anche nota come ",(0,a.jsx)(i.em,{children:"AT&T"}),"), usando la linea di comando in un sistema Linux.\r\nUtilizzeremo degli script appositi per assemblare, testare e debuggare.\r\nQuesti script non fanno che chiamare, semplificandone l'uso, ",(0,a.jsx)(i.code,{children:"gcc"})," e ",(0,a.jsx)(i.code,{children:"gdb"}),"."]}),"\n",(0,a.jsx)(i.h2,{id:"attenzione-allarchitettura",children:"Attenzione all'architettura"}),"\n",(0,a.jsx)(i.p,{children:"Programmare in assembler vuol dire programmare per una specifica architettura di processori.\r\nL'architettura x86 \xe8 stata rimpiazzata nel tempo da x64, a 64 bit, che \xe8 del tutto retrocompatibile.\r\nAltre architetture (in particolare, ARM) hanno istruzioni, registri e funzionamento completamente diversi e non sono compatibili con x86.\r\nUsare una macchina con architettura diversa \xe8 inevitabilmente fonte di problemi."}),"\n",(0,a.jsx)(i.p,{children:"Da una parte, si potrebbe pensare di esercitarsi scrivendo assembler per la propria architettura, anzich\xe9 quella usata nel corso.\r\nSorgono diversi problemi:"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"dover imparare sintassi, meccanismi, registri completamente diversi;"}),"\n",(0,a.jsx)(i.li,{children:"dover fare a meno o reingegnerizzarsi la libreria usata per l'input-output a terminale;"}),"\n",(0,a.jsx)(i.li,{children:"dover comunque imparare l'assembler mostrato nel corso, perch\xe9 quella sar\xe0 richiesta all'esame e supportata dalle macchine in laboratorio."}),"\n"]}),"\n",(0,a.jsx)(i.p,{children:"La seconda opzione \xe8 usare strumenti di virtualizzazione capaci di far girare un sistema operativo con architettura diversa.\r\nSorge come principale problema l'ergonomicit\xe0 ed efficienza di questa soluzione, che dipende molto dagli strumenti che si trovano e dalle caratteristiche hardware della macchina, che potrebbero essere non sufficienti."}),"\n",(0,a.jsxs)(i.admonition,{type:"warning",children:[(0,a.jsxs)(i.mdxAdmonitionTitle,{children:[(0,a.jsx)("u",{children:"Nessun supporto"})," per MAC con ARM"]}),(0,a.jsx)(i.p,{children:"Pi\xf9 avanti, indichiamo specifiche generali dell'ambiente utile a costruirsene uno equivalente con diversi hardware/sistemi operativi, ma non offriamo supporto su come farlo in alcuna architettura diversa da quella ufficiale del corso (Windows 10/11 su x86/x64)."}),(0,a.jsxs)(i.p,{children:["Non testiamo n\xe9 supportiamo ambienti per MAC con ARM, che non abbiamo a disposizione.\r\n",(0,a.jsx)(i.em,{children:"Ci \xe8 stato detto"})," che ",(0,a.jsx)(i.a,{href:"https://mac.getutm.app/",children:"UTM"})," pu\xf2 emulare l'architettura x86, affermazione che riportiamo senza alcuna garanzia.\r\nNon risponderemo a ulteriori domande a riguardo, soprattutto se parte delle ",(0,a.jsx)(i.a,{href:"/esercitazioni/Assembler/Problemi%20comuni",children:"domande frequenti"}),"."]})]}),"\n",(0,a.jsxs)(i.p,{children:["Tenere comunque presente che, per i programmi che intendiamo scrivere, basta una macchina x86 molto ",(0,a.jsx)(i.em,{children:"poco"})," potente."]}),"\n",(0,a.jsxs)(i.admonition,{title:"32 vs 64 bit",type:"info",children:[(0,a.jsxs)(i.p,{children:["In realt\xe0, i processori x86 a ",(0,a.jsx)(i.em,{children:"soli"})," 32 bit non sono pi\xf9 in commercio da vent'anni.\r\nI processori che si trovano oggi sono x64, a 64 bit, e sono in grado di eseguire codice a 32 bit per retrocompatibilit\xe0.\r\nNel corso, continuiamo ad usare l'istruction set a 32 bit perch\xe9"]}),(0,a.jsxs)(i.ol,{children:["\n",(0,a.jsx)(i.li,{children:"\xe8 di complessit\xe0 ridotta e sufficiente per i nostri scopi didattici,"}),"\n",(0,a.jsxs)(i.li,{children:["l'ambiente DOS, che qualcuno pu\xf2 trovare ancora utile, supporta ",(0,a.jsx)(i.em,{children:"solo"})," x86."]}),"\n"]})]}),"\n",(0,a.jsx)(i.h2,{id:"struttura-dellambiente",children:"Struttura dell'ambiente"}),"\n",(0,a.jsx)(i.p,{children:"I programmi che scriveremo ed eseguiremo, cos\xec come quelli utilizzati per assemblare, gireranno in un terminale Linux."}),"\n",(0,a.jsx)(i.admonition,{title:"Perch\xe9 Linux?",type:"note",children:(0,a.jsx)(i.p,{children:"Questo perch\xe9 \xe8 molto pi\xf9 facile virtualizzare un ambiente Linux moderno in Windows o Mac che il contrario.\r\nIn precedenza si usava MS-DOS, un sistema del 1981 facilmente emulabile, ma molto limitato data l'et\xe0."})}),"\n",(0,a.jsxs)(i.p,{children:["Nell'ambiente d'esame, si usa un Ubuntu 22.04 virtualizzato tramite ",(0,a.jsx)(i.a,{href:"https://learn.microsoft.com/en-us/windows/wsl/install",children:"WSL"})," su macchina Windows 11.\r\nCome editor usiamo ",(0,a.jsx)(i.a,{href:"https://code.visualstudio.com/",children:"Visual Studio Code"})," con l'",(0,a.jsx)(i.a,{href:"https://code.visualstudio.com/docs/remote/wsl",children:"estensione per lo sviluppo in WSL"}),"."]}),"\n",(0,a.jsxs)("figure",{children:[(0,a.jsx)("img",{src:(0,t.Ay)("img/assembler/ambiente/ambiente-wsl.drawio.png")}),(0,a.jsx)("figcaption",{children:(0,a.jsx)(i.p,{children:"Schema dell'ambiente usato all'esame."})})]}),"\n",(0,a.jsxs)(i.p,{children:["Questo ci permette di mantenere un ambiente grafico moderno mentre si lavora con un terminare Linux virtualizzato.\r\n\xc8 anche relativamente facile da riprodurre in altri contesti, utilizzando altre forme di visualizzazione e ",(0,a.jsx)(i.a,{href:"https://code.visualstudio.com/docs/remote/ssh",children:"SSH"}),"."]}),"\n",(0,a.jsxs)(i.p,{children:["Tra i file del corso (Teams o ",(0,a.jsx)(i.a,{href:"http://docenti.ing.unipi.it/~a080368/Teaching/RetiLogiche/materiale.html",children:"sito web"}),") trovate il pacchetto di installazione con le istruzioni passo-passo per riprodurre l'ambiente del laboratorio ",(0,a.jsx)("u",{children:"su una macchina Windows 11 con architettura x86"}),": questo perch\xe9 \xe8 pensata e testata per le macchine in laboratorio usate per l'esame."]}),"\n",(0,a.jsx)(i.p,{children:"Le stesse istruzioni possono essere adattate per riprodurre un ambiente funzionale in un contesto diverso."}),"\n",(0,a.jsxs)("figure",{children:[(0,a.jsx)("img",{src:(0,t.Ay)("img/assembler/ambiente/ambiente-ssh.drawio.png")}),(0,a.jsx)("figcaption",{children:(0,a.jsx)(i.p,{children:"Schema di un ambiente che usa SSH."})})]}),"\n",(0,a.jsx)(i.h3,{id:"requisiti-minimi",children:"Requisiti minimi"}),"\n",(0,a.jsx)(i.p,{children:"L'ambiente Linux deve essere in grado di"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:["Eseguire gli script ",(0,a.jsx)(i.code,{children:"powershell"})," dell'ambiente"]}),"\n",(0,a.jsxs)(i.li,{children:["Assemblare, usando ",(0,a.jsx)(i.code,{children:"gcc"}),", programmi x86 scritti con sintassi ",(0,a.jsx)(i.em,{children:"GAS"})]}),"\n",(0,a.jsx)(i.li,{children:"Eseguire programmi x86"}),"\n",(0,a.jsxs)(i.li,{children:["Debuggarli usando ",(0,a.jsx)(i.code,{children:"gdb"})]}),"\n"]}),"\n",(0,a.jsx)(i.p,{children:"Su Ubuntu 22.04, i pacchetti da installare sono"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:(0,a.jsx)(i.code,{children:"build-essential"})}),"\n",(0,a.jsx)(i.li,{children:(0,a.jsx)(i.code,{children:"gcc-multilib"})}),"\n",(0,a.jsx)(i.li,{children:(0,a.jsx)(i.code,{children:"gdb"})}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"powershell"})," (",(0,a.jsx)(i.a,{href:"https://learn.microsoft.com/en-us/powershell/scripting/install/install-ubuntu?view=powershell-7.4",children:"guida"}),")"]}),"\n"]}),"\n",(0,a.jsx)(i.admonition,{title:"Perch\xe9 Powershell?",type:"note",children:(0,a.jsxs)(i.p,{children:["Perch\xe9 Powershell (2006) \xe8 object-oriented, e permette di scrivere script leggibili e manutenibili, in modo semplice.\r\nBash (1989) \xe8 invece text-oriented, con una ",(0,a.jsx)(i.a,{href:"https://mywiki.wooledge.org/BashPitfalls",children:"lunga lista di trappole da saper evitare"}),"."]})}),"\n",(0,a.jsx)(i.h2,{id:"lanciare-lambiente-e-primo-programma",children:"Lanciare l'ambiente e primo programma"}),"\n",(0,a.jsxs)(i.p,{children:["Una volta eseguiti i passi dell'installazione, avremo una cartella ",(0,a.jsx)(i.code,{children:"C:/reti_logiche"})," con contenuto come da figura."]}),"\n",(0,a.jsx)("img",{src:(0,t.Ay)("img/assembler/ambiente/c-reti_logiche.png"),alt:""}),"\n",(0,a.jsxs)(i.p,{children:["Il file ",(0,a.jsx)(i.code,{children:"assembler.code-workspace"})," lancer\xe0 VS Code, collegandosi alla macchina virtuale WSL e la cartella di lavoro ",(0,a.jsx)(i.code,{children:"C:/reti_logiche/assembler"}),"."]}),"\n",(0,a.jsx)(i.admonition,{type:"info",children:(0,a.jsx)(i.p,{children:"Questo file \xe8 configurato per l'ambiente d'esame, per automatizzare l'avvio.\r\nSe si usa un ambiente diverso, il file andr\xe0 modificato di conseguenza per funzionare, o si dovr\xe0 avviare l'ambiente \"manualmente\"."})}),"\n",(0,a.jsx)(i.p,{children:"La finestra VS Code che si aprir\xe0 sar\xe0 simile alla seguente."}),"\n",(0,a.jsx)("img",{src:(0,t.Ay)("img/assembler/ambiente/vs-code-assembler-start.png"),alt:""}),"\n",(0,a.jsxs)(i.p,{children:["Nell'angolo in basso a sinistra, ",(0,a.jsx)(i.code,{children:"WSL: Ubuntu-22.04"})," sta a indicare che l'editor \xe8 correttamente connesso alla macchina virtuale (compare una dicitura simile se si usa SSH)."]}),"\n",(0,a.jsx)(i.p,{children:"I file e cartelle mostrati nell'immagine sono quelli che ci si deve aspettare dall'ambiente vuoto."}),"\n",(0,a.jsxs)(i.p,{children:["Il file ",(0,a.jsx)(i.code,{children:"test-ambiente.s"})," \xe8 un semplice programma per verificare che l'ambiente funzioni."]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-assembler",metastring:"showLines",children:'.include "./files/utility.s"\r\n\r\n.data\r\nmessaggio: .ascii "Ok.\\r"\r\n\r\n.text\r\n_main:  \r\n   nop\r\n   lea messaggio, %ebx\r\n   call outline\r\n   ret\r\n\n'})}),"\n",(0,a.jsx)(i.p,{children:"Apriamo quindi un terminale in VS Code (Terminale > Nuovo Terminale).\r\nPer poter lanciare gli script, il terminale deve essere Powershell, non bash."}),"\n",(0,a.jsx)(i.p,{children:"Non cos\xec:"}),"\n",(0,a.jsx)("img",{src:(0,t.Ay)("img/assembler/ambiente/vs-code-assembler-terminal-bash.png"),alt:""}),"\n",(0,a.jsx)(i.p,{children:"Ma cos\xec:"}),"\n",(0,a.jsx)("img",{src:(0,t.Ay)("img/assembler/ambiente/vs-code-assembler-terminal-pwsh.png"),alt:""}),"\n",(0,a.jsxs)(i.p,{children:["Per cambiare shell si pu\xf2 usare il bottone ",(0,a.jsx)(i.code,{children:"+"})," sulla sinistra, o lanciare il comando ",(0,a.jsx)(i.code,{children:"pwsh"})," senza argomenti."]}),"\n",(0,a.jsx)(i.admonition,{type:"info",children:(0,a.jsx)(i.p,{children:"Se si preferisce, in VS Code si pu\xf2 aprire un terminale anche come tab dell'editor, o spostandolo al lato anzich\xe9 in basso."})}),"\n",(0,a.jsx)(i.p,{children:"A questo punto possiamo lanciare il comando per assemblare il programma di test."}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{children:"./assemble.ps1 ./test-ambiente.s\n"})}),"\n",(0,a.jsxs)(i.p,{children:["Dovremmo adesso vedere, tra i file, il binario ",(0,a.jsx)(i.code,{children:"test-ambiente"}),".\r\nLo possiamo eseguire con ",(0,a.jsx)(i.code,{children:"./test-ambiente"}),", che dovrebbe stampare ",(0,a.jsx)(i.code,{children:"Ok."}),"."]}),"\n",(0,a.jsx)("img",{src:(0,t.Ay)("img/assembler/ambiente/vs-code-assembler-terminal-test-ambiente.png"),alt:""})]})}function u(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>t,x:()=>o});var r=n(96540);const a={},s=r.createContext(a);function t(e){const i=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),r.createElement(s.Provider,{value:i},e.children)}}}]);